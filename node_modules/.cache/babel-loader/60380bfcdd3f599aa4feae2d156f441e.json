{"ast":null,"code":"var _jsxFileName = \"/Users/guillaumepevrier/Projets/OpenclassRoom/Projet 6 - Cre\\u0301ez une application web de location immobilie\\u0300re avec React/Workflow/shiny-agency/src/pages/Survey/index.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Link } from 'react-router-dom';\nimport styled from 'styled-components';\nimport colors from '../../utils/style/colors';\nimport { Loader } from '../../utils/style/Atoms';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SurveyContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n_c = SurveyContainer;\nconst QuestionTitle = styled.h2`\n  text-decoration: underline;\n  text-decoration-color: ${colors.primary};\n`;\n_c2 = QuestionTitle;\nconst QuestionContent = styled.span`\n  margin: 30px;\n`;\n_c3 = QuestionContent;\nconst LinkWrapper = styled.div`\n  padding-top: 30px;\n  & a {\n    color: black;\n  }\n  & a:first-of-type {\n    margin-right: 20px;\n  }\n`;\n_c4 = LinkWrapper;\n\nfunction Survey() {\n  _s();\n\n  const {\n    questionNumber\n  } = useParams();\n  const questionNumberInt = parseInt(questionNumber);\n  const prevQuestionNumber = questionNumberInt === 1 ? 1 : questionNumberInt - 1;\n  const nextQuestionNumber = questionNumberInt + 1;\n  const [surveyData, setSurveyData] = useState({});\n  const [isDataLoading, setDataLoading] = useState(false); // Cette syntaxe permet aussi bien de faire des calls API.\n  // Mais pour utiliser await dans une fonction, il faut que celle-ci soit async (pour asynchrone).\n  // Comme la fonction pass√©e √† useEffect ne peut pas √™tre asynchrone,\n  // il faut utiliser une fonction qui est appel√©e dans useEffect et d√©clar√©e en dehors, comme ici üëá.\n  // Essayez de commenter le code cr√©√© dans le chapitre et de d√©commenter fetchData pour voir.\n  // async function fetchData() {\n  //   try {\n  //     const response = await fetch(`http://localhost:8000/survey`)\n  //     const { surveyData } = await response.json()\n  //     setSurveyData(surveyData)\n  //   } catch (error) {\n  // console.log('===== error =====', error)\n  // setError(true)\n  //   }\n  // }\n\n  useEffect(() => {\n    // fetchData()\n    setDataLoading(true);\n    fetch(`http://localhost:8000/survey`).then(response => response.json().then(({\n      surveyData\n    }) => {\n      setSurveyData(surveyData);\n      setDataLoading(false);\n    }));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(SurveyContainer, {\n    children: [/*#__PURE__*/_jsxDEV(QuestionTitle, {\n      children: [\"Question \", questionNumber]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this), isDataLoading ? /*#__PURE__*/_jsxDEV(Loader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(QuestionContent, {\n      children: surveyData[questionNumber]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(LinkWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: `/survey/${prevQuestionNumber}`,\n        children: \"Pr\\xE9c\\xE9dent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), surveyData[questionNumberInt + 1] ? /*#__PURE__*/_jsxDEV(Link, {\n        to: `/survey/${nextQuestionNumber}`,\n        children: \"Suivant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/results\",\n        children: \"R\\xE9sultats\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Survey, \"ojhW916f2rbCuOu1TKQdfP7pRdE=\", false, function () {\n  return [useParams];\n});\n\n_c5 = Survey;\nexport default Survey;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"SurveyContainer\");\n$RefreshReg$(_c2, \"QuestionTitle\");\n$RefreshReg$(_c3, \"QuestionContent\");\n$RefreshReg$(_c4, \"LinkWrapper\");\n$RefreshReg$(_c5, \"Survey\");","map":{"version":3,"sources":["/Users/guillaumepevrier/Projets/OpenclassRoom/Projet 6 - CreÃÅez une application web de location immobilieÃÄre avec React/Workflow/shiny-agency/src/pages/Survey/index.jsx"],"names":["useState","useEffect","useParams","Link","styled","colors","Loader","SurveyContainer","div","QuestionTitle","h2","primary","QuestionContent","span","LinkWrapper","Survey","questionNumber","questionNumberInt","parseInt","prevQuestionNumber","nextQuestionNumber","surveyData","setSurveyData","isDataLoading","setDataLoading","fetch","then","response","json"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,SAASC,MAAT,QAAuB,yBAAvB;;AAEA,MAAMC,eAAe,GAAGH,MAAM,CAACI,GAAI;AACnC;AACA;AACA;AACA,CAJA;KAAMD,e;AAMN,MAAME,aAAa,GAAGL,MAAM,CAACM,EAAG;AAChC;AACA,2BAA2BL,MAAM,CAACM,OAAQ;AAC1C,CAHA;MAAMF,a;AAKN,MAAMG,eAAe,GAAGR,MAAM,CAACS,IAAK;AACpC;AACA,CAFA;MAAMD,e;AAIN,MAAME,WAAW,GAAGV,MAAM,CAACI,GAAI;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CARA;MAAMM,W;;AAUN,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM;AAAEC,IAAAA;AAAF,MAAqBd,SAAS,EAApC;AACA,QAAMe,iBAAiB,GAAGC,QAAQ,CAACF,cAAD,CAAlC;AACA,QAAMG,kBAAkB,GAAGF,iBAAiB,KAAK,CAAtB,GAA0B,CAA1B,GAA8BA,iBAAiB,GAAG,CAA7E;AACA,QAAMG,kBAAkB,GAAGH,iBAAiB,GAAG,CAA/C;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BtB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACuB,aAAD,EAAgBC,cAAhB,IAAkCxB,QAAQ,CAAC,KAAD,CAAhD,CANgB,CAQhB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAuB,IAAAA,cAAc,CAAC,IAAD,CAAd;AACAC,IAAAA,KAAK,CAAE,8BAAF,CAAL,CAAsCC,IAAtC,CAA4CC,QAAD,IACzCA,QAAQ,CAACC,IAAT,GAAgBF,IAAhB,CAAqB,CAAC;AAAEL,MAAAA;AAAF,KAAD,KAAoB;AACvCC,MAAAA,aAAa,CAACD,UAAD,CAAb;AACAG,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD,KAHD,CADF;AAMD,GATQ,EASN,EATM,CAAT;AAWA,sBACE,QAAC,eAAD;AAAA,4BACE,QAAC,aAAD;AAAA,8BAAyBR,cAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEGO,aAAa,gBACZ,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADY,gBAGZ,QAAC,eAAD;AAAA,gBAAkBF,UAAU,CAACL,cAAD;AAA5B;AAAA;AAAA;AAAA;AAAA,YALJ,eAOE,QAAC,WAAD;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,EAAE,EAAG,WAAUG,kBAAmB,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGE,UAAU,CAACJ,iBAAiB,GAAG,CAArB,CAAV,gBACC,QAAC,IAAD;AAAM,QAAA,EAAE,EAAG,WAAUG,kBAAmB,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,gBAGC,QAAC,IAAD;AAAM,QAAA,EAAE,EAAC,UAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAkBD;;GAtDQL,M;UACoBb,S;;;MADpBa,M;AAwDT,eAAeA,MAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components'\nimport colors from '../../utils/style/colors'\nimport { Loader } from '../../utils/style/Atoms'\n\nconst SurveyContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst QuestionTitle = styled.h2`\n  text-decoration: underline;\n  text-decoration-color: ${colors.primary};\n`\n\nconst QuestionContent = styled.span`\n  margin: 30px;\n`\n\nconst LinkWrapper = styled.div`\n  padding-top: 30px;\n  & a {\n    color: black;\n  }\n  & a:first-of-type {\n    margin-right: 20px;\n  }\n`\n\nfunction Survey() {\n  const { questionNumber } = useParams()\n  const questionNumberInt = parseInt(questionNumber)\n  const prevQuestionNumber = questionNumberInt === 1 ? 1 : questionNumberInt - 1\n  const nextQuestionNumber = questionNumberInt + 1\n  const [surveyData, setSurveyData] = useState({})\n  const [isDataLoading, setDataLoading] = useState(false)\n\n  // Cette syntaxe permet aussi bien de faire des calls API.\n  // Mais pour utiliser await dans une fonction, il faut que celle-ci soit async (pour asynchrone).\n  // Comme la fonction pass√©e √† useEffect ne peut pas √™tre asynchrone,\n  // il faut utiliser une fonction qui est appel√©e dans useEffect et d√©clar√©e en dehors, comme ici üëá.\n  // Essayez de commenter le code cr√©√© dans le chapitre et de d√©commenter fetchData pour voir.\n\n  // async function fetchData() {\n  //   try {\n  //     const response = await fetch(`http://localhost:8000/survey`)\n  //     const { surveyData } = await response.json()\n  //     setSurveyData(surveyData)\n  //   } catch (error) {\n  // console.log('===== error =====', error)\n  // setError(true)\n  //   }\n  // }\n\n  useEffect(() => {\n    // fetchData()\n    setDataLoading(true)\n    fetch(`http://localhost:8000/survey`).then((response) =>\n      response.json().then(({ surveyData }) => {\n        setSurveyData(surveyData)\n        setDataLoading(false)\n      })\n    )\n  }, [])\n\n  return (\n    <SurveyContainer>\n      <QuestionTitle>Question {questionNumber}</QuestionTitle>\n      {isDataLoading ? (\n        <Loader />\n      ) : (\n        <QuestionContent>{surveyData[questionNumber]}</QuestionContent>\n      )}\n      <LinkWrapper>\n        <Link to={`/survey/${prevQuestionNumber}`}>Pr√©c√©dent</Link>\n        {surveyData[questionNumberInt + 1] ? (\n          <Link to={`/survey/${nextQuestionNumber}`}>Suivant</Link>\n        ) : (\n          <Link to=\"/results\">R√©sultats</Link>\n        )}\n      </LinkWrapper>\n    </SurveyContainer>\n  )\n}\n\nexport default Survey\n"]},"metadata":{},"sourceType":"module"}