{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from 'react';\nimport { ThemeContext } from '../context';\nexport function useFetch(url) {\n  _s();\n\n  const [data, setData] = useState({});\n  const [isLoading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  useEffect(() => {\n    if (!url) return;\n    setLoading(true);\n\n    async function fetchData() {\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        setData(data);\n      } catch (err) {\n        setError(true);\n      } finally {\n        setLoading(false);\n      }\n    }\n\n    fetchData();\n  }, [url]);\n  return {\n    isLoading,\n    data,\n    error\n  };\n}\n\n_s(useFetch, \"I3PlMlwpe/K4XMhtkGOVndNNG2k=\");\n\nexport function useTheme() {\n  _s2();\n\n  const {\n    theme,\n    toggleTheme\n  } = useContext(ThemeContext);\n  return {\n    theme,\n    toggleTheme\n  };\n}\n\n_s2(useTheme, \"EFRZgBTSn7R64yv9sbxwgPkwfJQ=\");","map":{"version":3,"sources":["/Users/guillaumepevrier/Projets/OpenclassRoom/Projet 6 - Créez une application web de location immobilière avec React/Workflow/shiny-agency/src/utils/hooks/index.jsx"],"names":["useState","useEffect","useContext","ThemeContext","useFetch","url","data","setData","isLoading","setLoading","error","setError","fetchData","response","fetch","json","err","useTheme","theme","toggleTheme"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,YAAT,QAA6B,YAA7B;AAEA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA;;AAC5B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACQ,SAAD,EAAYC,UAAZ,IAA0BT,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,KAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACI,GAAL,EAAU;AACVI,IAAAA,UAAU,CAAC,IAAD,CAAV;;AACA,mBAAeG,SAAf,GAA2B;AACzB,UAAI;AACF,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,CAA5B;AACA,cAAMC,IAAI,GAAG,MAAMO,QAAQ,CAACE,IAAT,EAAnB;AACAR,QAAAA,OAAO,CAACD,IAAD,CAAP;AACD,OAJD,CAIE,OAAOU,GAAP,EAAY;AACZL,QAAAA,QAAQ,CAAC,IAAD,CAAR;AACD,OAND,SAMU;AACRF,QAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF;;AACDG,IAAAA,SAAS;AACV,GAfQ,EAeN,CAACP,GAAD,CAfM,CAAT;AAgBA,SAAO;AAAEG,IAAAA,SAAF;AAAaF,IAAAA,IAAb;AAAmBI,IAAAA;AAAnB,GAAP;AACD;;GAtBeN,Q;;AAwBhB,OAAO,SAASa,QAAT,GAAoB;AAAA;;AACzB,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAyBjB,UAAU,CAACC,YAAD,CAAzC;AACA,SAAO;AAAEe,IAAAA,KAAF;AAASC,IAAAA;AAAT,GAAP;AACD;;IAHeF,Q","sourcesContent":["import { useState, useEffect, useContext } from 'react'\nimport { ThemeContext } from '../context'\n\nexport function useFetch(url) {\n  const [data, setData] = useState({})\n  const [isLoading, setLoading] = useState(true)\n  const [error, setError] = useState(false)\n\n  useEffect(() => {\n    if (!url) return\n    setLoading(true)\n    async function fetchData() {\n      try {\n        const response = await fetch(url)\n        const data = await response.json()\n        setData(data)\n      } catch (err) {\n        setError(true)\n      } finally {\n        setLoading(false)\n      }\n    }\n    fetchData()\n  }, [url])\n  return { isLoading, data, error }\n}\n\nexport function useTheme() {\n  const { theme, toggleTheme } = useContext(ThemeContext)\n  return { theme, toggleTheme }\n}\n"]},"metadata":{},"sourceType":"module"}